
C:/Users/sgdon/Source/Repos/sdonchez/ECE-8448/Homework2/Part2/Homework2Part2.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
*****************************************************************************************/

			.text					//executable code follows
			.global _start			//start of program
_start:
			LDR     R4, =RESULT		//Load Result into Reg 4
   0:	e59f4054 	ldr	r4, [pc, #84]	; 5c <NUMBERS+0x1c>
			LDR     R2, [R4, #4]	//Load value of location with address 4 greater than 
   4:	e5942004 	ldr	r2, [r4, #4]
									//is found in R4 (N) into R2
			ADD     R3, R4, #8		//Load address 8 greater than is found in R4 (address 
   8:	e2843008 	add	r3, r4, #8
									//of numbers)) into R3
			LDR     R0, [R3]		//Load value at address specified in R3 into R0
   c:	e5930000 	ldr	r0, [r3]

00000010 <LOOP>:

LOOP:       SUBS    R2, R2, #1		//Decrement R2 (N) by one, store in R2
  10:	e2522001 	subs	r2, r2, #1
			BEQ     DONE			//If R2 = 0, goto done
  14:	0a000005 	beq	30 <DONE>
			ADD     R3, R3, #4		//Add 4 to the value of R3, store in R3
  18:	e2833004 	add	r3, r3, #4
			LDR     R1, [R3]		//Load contents of R3 into R1
  1c:	e5931000 	ldr	r1, [r3]
			CMP     R0, R1			//Compare the contents of R0 (Previous Number), and R1
  20:	e1500001 	cmp	r0, r1
									// (Current Number)
			BGE     LOOP			//If value in R0 is >= R1, return to top of loop
  24:	aafffff9 	bge	10 <LOOP>
			MOV     R0,R1			//otherwise, move the contents of R1 to R0 (such that 
  28:	e1a00001 	mov	r0, r1
									//R0 always holds the largest known number)
			B       LOOP			//Unconditional return to start of loop
  2c:	eafffff7 	b	10 <LOOP>

00000030 <DONE>:

DONE:       STR     R0, [R4]		//Store the contents of R0 at the address specified by
  30:	e5840000 	str	r0, [r4]

00000034 <END>:
									//R4 (Result)

END:        B       END				//Stay here (so we don't try to execute dataset)
  34:	eafffffe 	b	34 <END>

00000038 <RESULT>:
  38:	00000000 	.word	0x00000000

0000003c <N>:
  3c:	00000007 	.word	0x00000007

00000040 <NUMBERS>:
  40:	00000004 	.word	0x00000004
  44:	00000005 	.word	0x00000005
  48:	00000003 	.word	0x00000003
  4c:	00000006 	.word	0x00000006
  50:	00000001 	.word	0x00000001
  54:	00000008 	.word	0x00000008
  58:	00000002 	.word	0x00000002
  5c:	00000038 	.word	0x00000038
