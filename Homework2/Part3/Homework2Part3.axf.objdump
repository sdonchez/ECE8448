
C:/Users/sgdon/Source/Repos/sdonchez/ECE-8448/Homework2/Part3/Homework2Part3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
*****************************************************************************************/

			.text					//executable code follows
			.global _start			//start of program
_start:
			LDR     R4, =RESULT		//Load Result into Reg 4
   0:	e59f405c 	ldr	r4, [pc, #92]	; 64 <NUMBERS+0x1c>
			LDR     R2, [R4, #4]	//Load value of location with address 4 greater than 
   4:	e5942004 	ldr	r2, [r4, #4]
									//is found in R4 (N) into R2
			ADD     R1, R4, #8		//Load address 8 greater than is found in R4 (address 
   8:	e2841008 	add	r1, r4, #8
									//of numbers)) into R1
			BL 		SUB1			//call the SUB1 subroutine
   c:	eb000001 	bl	18 <SUB1>
			STR     R0, [R4]		//Store the contents of R0 at the address specified by
  10:	e5840000 	str	r0, [r4]

00000014 <END>:
									//R4 (Result)
END:        B       END				//Stay here (so we don't try to execute dataset or
  14:	eafffffe 	b	14 <END>

00000018 <SUB1>:
									//subroutine)

SUB1:       LDR		R0, [R1]		//Load contents of address in R1 (1st number) into R0
  18:	e5910000 	ldr	r0, [r1]

0000001c <LOOP>:
LOOP:		SUBS    R2, R2, #1		//Decrement R2 (N) by one, store in R2
  1c:	e2522001 	subs	r2, r2, #1
			BEQ     DONE			//If R2 = 0, goto done
  20:	0a000005 	beq	3c <DONE>
			ADD     R1, R1, #4		//Add 4 to the value of R1, store in R1
  24:	e2811004 	add	r1, r1, #4
			LDR		R3, [R1]		//Load contents of address in R1 into R3
  28:	e5913000 	ldr	r3, [r1]
			CMP     R0, R3			//Compare the contents of R0 (Previous Value), and R3
  2c:	e1500003 	cmp	r0, r3
									// (Current Number)
			BGE     LOOP			//If value in R0 is >= R3, return to top of loop
  30:	aafffff9 	bge	1c <LOOP>
			MOV     R0,R3			//otherwise, move the contents of R0 to R2 (such that 
  34:	e1a00003 	mov	r0, r3
									//R2 always holds the largest known number)
			B       LOOP			//Unconditional return to start of loop
  38:	eafffff7 	b	1c <LOOP>

0000003c <DONE>:

DONE:		BX		lr				//return from subroutine
  3c:	e12fff1e 	bx	lr

00000040 <RESULT>:
  40:	00000000 	.word	0x00000000

00000044 <N>:
  44:	00000007 	.word	0x00000007

00000048 <NUMBERS>:
  48:	00000004 	.word	0x00000004
  4c:	00000005 	.word	0x00000005
  50:	00000003 	.word	0x00000003
  54:	00000006 	.word	0x00000006
  58:	00000001 	.word	0x00000001
  5c:	00000008 	.word	0x00000008
  60:	00000002 	.word	0x00000002
  64:	00000040 	.word	0x00000040
